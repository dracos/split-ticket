#!/usr/bin/env python

"""
The restrictions file has lines of one of the following types:

"""

from datetime import date
import json

cnv_str = lambda x: x.rstrip()

def unpack(row, *fields):
    ptr = 0
    data = {}
    for f in fields:
        fn = f[2] if len(f)==3 else cnv_str
        r = row[ptr:ptr+f[1]]
        data[f[0]] = fn(r)
        ptr += f[1]
    return data

lookups = {
    "SR": ( ('code', 2), ('id', 6), ('dir', 1), ('quota', 1), ('sleeping_ind', 1) ),

    'BS': ( ('type', 1), ('uid', 6), ('date_from', 6), ('date_to', 6), ('days', 7), ('bh', 1), ('status', 1),
        ('category', 2), ('identity', 4), ('headcode', 4), ('course_indicator', 1), ('service_code', 8),
        ('portion_id', 1), ('power_type', 3), ('timing_load', 4), ('speed', 3), ('opchars', 6),
        ('train_class', 1), ('sleepers', 1), ('reservations', 1), ('connection_indicator', 1),
        ('catering', 4), ('branding', 4), ('spare', 1), ('stp', 1),
    ),
    'BX': ( ('dummy', 4), ('uic', 5), ('atoc', 2), ('ats', 1) ),
    'LO': ( ('location', 8), ('dep_sched', 5), ('dep_public', 4), ('platform', 3), ('line', 3), ('eng_allow', 2), ('pathing_allow', 2), ('activity', 12), ('perf_allow', 2) ),
    'LI': ( ('location', 8), ('arr_sched', 5), ('dep_sched', 5), ('pass_sched', 5), ('arr_public', 4), ('dep_public', 4), ('platform', 3), ('line', 3), ('path', 3), ('activity', 12), ('eng_allow', 2), ('pathing_allow', 2), ('perf_allow', 2)  ),
    'LT': ( ('location', 8), ('arr_sched', 5), ('arr_public', 4), ('platform', 4), ('path', 3), ('activity', 12) ),
}

started = False
TRAINS = set()
for row in open('RJFAF273/RJFAF273.RST'):
    update_marker, record_type, cf_mkr = row[0], row[1:3], row[3]
    row = row[4:].strip()

    if update_marker == '/' and record_type == '!!':
        if not started: continue
        if 'End of file' in row: continue
    started = True
    assert update_marker == 'R'

    if cf_mkr == 'C': continue
    if record_type != 'SR': continue
    row = unpack(row, *lookups[record_type])
    TRAINS.add(row['id'])

stations = {}
started = None
data = {}
for line in open('ttf449/ttisf449.mca'):
    if line.startswith('TI'):
        tiploc = line[2:9].strip()
        crs = line[53:56].strip()
        if not crs: continue
        stations[tiploc] = crs
        continue

    if line.startswith('BSN'):
        if line[3:9] in TRAINS:
            started = line[3:9]
        else:
            started = None

    if started:
        type, row = line[0:2], line[2:]
        if type == 'CR': continue
        row = unpack(row, *lookups[type])
        if type == 'BS':
            if row['days'][1] == '0': continue
            del row['reservations'], row['power_type'], row['train_class'], row['speed'], row['headcode'], row['category'], row['course_indicator'], row['connection_indicator'], row['branding'], row['type'], row['status'], row['bh'], row['catering'], row['spare'], row['portion_id'], row['opchars'], row['sleepers'], row['timing_load'], row['identity'], row['stp'], row['service_code']
            assert row['uid'] == started
            data[row['uid']] = row
        elif type == 'BX':
            continue
        elif type in ('LO', 'LI', 'LT'):
            if row['location'] not in stations: continue
            if row.get('arr_sched') == '': continue
            if started not in data: continue
            data[started].setdefault('stops', {})[stations[row['location']]] = [ row.get('arr_public'), row.get('dep_public') ]
        else:
            raise Exception

json.dump(data, open('data/trains.json', 'w'))
