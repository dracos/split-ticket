#!/usr/bin/env python

from datetime import date
import json

cnv_full_date = lambda x: date(int(x[4:8]), int(x[2:4]), int(x[0:2]))
cnv_str = lambda x: x.rstrip()

def unpack(row, *fields):
    ptr = 0
    data = {}
    for f in fields:
        fn = f[2] if len(f)==3 else cnv_str
        r = row[ptr:ptr+f[1]]
        data[f[0]] = fn(r)
        ptr += f[1]
    return data

started = False
data = {}
data_by_id = {}
for row in open('RJFAF273/RJFAF273.FFL'):
    update_marker, record_type, row = row[0], row[1], row[2:].strip()

    if update_marker == '/' and record_type == '!':
        if not started: continue
        if 'End of file' in row: continue
    started = True
    assert update_marker == 'R'

    lookups = {
        'F': ( ('from', 4), ('to', 4), ('route', 5), ('status', 3), ('usage', 1), ('direction', 1), ('todate', 8, cnv_full_date), ('fromdate', 8, cnv_full_date), ('toc', 3), ('london', 1), ('nsd', 1), ('pub', 1), ('id', 7) ),
        'T': ( ('id', 7), ('type', 3), ('price', 8), ('restriction', 2) ),
    }
    row = unpack(row, *lookups[record_type])

    if record_type == 'T':
        if row['id'] not in data_by_id: continue
        if row['type'] not in ('SVR', 'SOR', 'CDR', 'SDR', 'CDS', 'SDS', 'SOS'): continue
        data_by_id[row['id']]['prices'][row['type']] = ( row['price'], row['restriction'] )
    else:
        if row['usage'] == 'C': continue
        if row['nsd'] != '0': continue
        if row['todate'] < date.today(): continue
        if row['fromdate'] > date.today(): continue
        assert row['status'] == '000'
        del row['todate'], row['fromdate'], row['status'], row['nsd'], row['usage'], row['pub']
        d = {
            'prices': {},
            'toc': row['toc'],
            'route': row['route'],
            'direction': row['direction'],
        }
        data.setdefault(row['from'], {}).setdefault(row['to'], []).append(d)
        data_by_id[row['id']] = d
        #print row['id'], row['from'], row['to'], d

for fr, d1 in data.items():
    for to, d2 in d1.items():
        for i, d in enumerate(d2):
            if not d['prices']:
                del d2[i]

print json.dumps(data)
